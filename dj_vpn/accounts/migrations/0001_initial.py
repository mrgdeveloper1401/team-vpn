# Generated by Django 5.1.8 on 2025-05-14 10:46

import dj_vpn.cores.managers
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('is_deleted', models.BooleanField(blank=True, editable=False, null=True)),
                ('mobile_phone', models.CharField(blank=True, help_text='شماره موبایل کاربر', max_length=15, null=True, unique=True)),
                ('birth_date', models.DateField(blank=True, help_text='تاریخ تولد', null=True)),
                ('account_type', models.CharField(choices=[('normal_user', 'Normal User'), ('premium_user', 'Premium User')], default='normal_user', help_text='نوع اکانت', max_length=15)),
                ('accounts_status', models.CharField(choices=[('active', 'Active'), ('limit', 'Limit'), ('expired', 'Expired'), ('nothing', 'Nothing')], default='expired', help_text='active --> حجم و تاریخ انتقضای کانفینگ کاربر فعال هسنن \nlimit --> لیمیت یعنی کاربر حجمش تموم شده هست \nexpire --> یعنی کاربر روز کانفینگ ان تموم شده هست', max_length=15)),
                ('volume_choice', models.CharField(choices=[('mg', 'Mg'), ('gb', 'Gb'), ('tra', 'Tra')], default='gb', max_length=7)),
                ('volume', models.PositiveIntegerField(default=0, help_text='کاربر چقدر حجم داشته باشد', validators=[django.core.validators.MinValueValidator(0)])),
                ('volume_usage', models.FloatField(blank=True, default=0, help_text='حجم مصرفی میباشد که بر اساس مگابایت هست', validators=[django.core.validators.MinValueValidator(0)])),
                ('is_inf_volume', models.BooleanField(default=False, help_text='ایا حجم کاربر نامحدود باشد!')),
                ('all_volume_usage', models.FloatField(default=0, editable=False, help_text='کاربر تا الان چقدر حجم مصرف کرده!', validators=[django.core.validators.MinValueValidator(0)])),
                ('start_premium', models.DateField(blank=True, help_text='تاریخ شروع اشتراک اگر کاربر لاگین کند اشتراک کاربر از همان روز شروع خواهد شد', null=True)),
                ('number_of_days', models.PositiveIntegerField(default=0, help_text='تعداد روز', null=True)),
                ('number_of_login', models.PositiveIntegerField(db_default=0, default=0, editable=False, help_text='تعداد لاگین های کاربر')),
                ('is_connected_user', models.BooleanField(default=False, help_text='این فیلد مشخص میکنه که کاربر ایا به کانفیگش متصل شده هست یا خیر')),
                ('number_of_max_device', models.PositiveIntegerField(default=1, help_text='هر اکانت چند تا یوزر میتواند به ان متصل شود')),
                ('fcm_token', models.CharField(blank=True, help_text='fcm token', max_length=255, null=True)),
                ('user_type', models.CharField(blank=True, choices=[('direct', 'مستقیم'), ('tunnel', 'تانل'), ('tunnel_direct', 'تانل و دایرکت')], help_text='you can choice --> tunnel - direct - tunnel_direct', max_length=14, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='owner', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
                'ordering': ('-date_joined',),
            },
            managers=[
                ('objects', dj_vpn.cores.managers.UserSoftManager()),
            ],
        ),
        migrations.CreateModel(
            name='OneDayLeftUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('accounts.user',),
        ),
        migrations.CreateModel(
            name='ContentDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('is_deleted', models.BooleanField(blank=True, editable=False, null=True)),
                ('device_model', models.CharField(blank=True, help_text='مدل دستگاه', max_length=255, null=True)),
                ('device_os', models.CharField(blank=True, help_text='نسخه دستگاه', max_length=50, null=True)),
                ('device_number', models.CharField(help_text='سریال گوشی', max_length=255)),
                ('ip_address', models.GenericIPAddressField(help_text='ادرس ای پی')),
                ('is_blocked', models.BooleanField(default=False, help_text='بلاک شدن')),
                ('user', models.ForeignKey(help_text='کاربر', on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_device', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'content_device',
            },
        ),
        migrations.CreateModel(
            name='PrivateNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('is_deleted', models.BooleanField(blank=True, editable=False, null=True)),
                ('title', models.CharField(help_text='عنوان اعلانات', max_length=255)),
                ('body', models.TextField(help_text='متن اعلانات')),
                ('user', models.ForeignKey(help_text='گاربر', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'private_notification',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='UserLoginLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_login_log', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_login_log',
                'ordering': ('-created_at',),
            },
        ),
    ]
